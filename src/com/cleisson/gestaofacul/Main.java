/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cleisson.gestaofacul;

import static com.cleisson.gestaofacul.SalvarNoPc.ReadFile;
import static com.cleisson.gestaofacul.SalvarNoPc.WriteFile;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonWriter;
import java.awt.Cursor;
import java.awt.List;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cleisson
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form professores
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollBar1 = new javax.swing.JScrollBar();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        tabCadastroProfFun = new javax.swing.JPanel();
        nome = new javax.swing.JTextField();
        matricula = new javax.swing.JTextField();
        endereco = new javax.swing.JTextField();
        salario = new javax.swing.JTextField();
        dataDeAdimissao = new javax.swing.JTextField();
        telefone = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        escolha = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        escolas = new javax.swing.JComboBox<>();

        setor = new javax.swing.JComboBox<>();
        this.setor.setEnabled(false);
        qtn = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tabCadastroEscolas = new javax.swing.JPanel();
        nomeEscola = new javax.swing.JTextField();
        btnSalvarEscola = new javax.swing.JButton();
        escolhaEscola = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        verProfessores = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        progressoTabela = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema de Gestão - Projeto da disciplina P.O.O");
        setBackground(java.awt.SystemColor.controlLtHighlight);
        setIconImages(null);
        setLocation(new java.awt.Point(150, 150));
        setMinimumSize(new java.awt.Dimension(680, 500));

        jTabbedPane1.setBackground(java.awt.SystemColor.controlLtHighlight);
        jTabbedPane1.setForeground(new java.awt.Color(255, 255, 255));

        tabCadastroProfFun.setBackground(java.awt.SystemColor.controlLtHighlight);

        nome.setText("Nome completo");
        nome.setToolTipText("Informe o nome completo");
        nome.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        nome.setName(""); // NOI18N
        nome.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nomeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nomeFocusLost(evt);
            }
        });

        matricula.setText("Matricula");
        matricula.setToolTipText("Insira apenas numeros");
        matricula.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                matriculaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                matriculaFocusLost(evt);
            }
        });
        matricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matriculaActionPerformed(evt);
            }
        });

        endereco.setText("Endereço");
        endereco.setToolTipText("Informe o endereço completo");
        endereco.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                enderecoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                enderecoFocusLost(evt);
            }
        });

        salario.setText("Salario");
        salario.setToolTipText("Informe o salario, é permitido o uso de virgula e ponto");
        salario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                salarioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                salarioFocusLost(evt);
            }
        });

        dataDeAdimissao.setText("Data de Admissão");
        dataDeAdimissao.setToolTipText("Insira apenas numeros");
        dataDeAdimissao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dataDeAdimissaoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dataDeAdimissaoFocusLost(evt);
            }
        });

        telefone.setText("(xx) xxxx-xxxx");
        telefone.setToolTipText("Insira apenas numeros");
        telefone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                telefoneFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                telefoneFocusLost(evt);
            }
        });

        btnSalvar.setFont(new java.awt.Font("Tekton Pro Cond", 0, 18)); // NOI18N
        btnSalvar.setForeground(new java.awt.Color(0, 153, 51));
        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/save.png"))); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnSalvar.setIconTextGap(8);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        escolha.setFont(escolas.getFont());
        escolha.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Professores", "Funcionarios" }));
        escolha.setBorder(null);
        escolha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escolhaActionPerformed(evt);
            }
        });

        jLabel2.setText("Quem você quer cadastrar?");

        escolas.setFont(new java.awt.Font("Niagara Engraved", 0, 18)); // NOI18N

        setor.setFont(escolas.getFont());
        setor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Limpeza", "Suporte", "Tecnico de Informatica", "Motorista" }));
        setor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setorActionPerformed(evt);
            }
        });

        qtn.setText("0");

        jLabel3.setFont(new java.awt.Font("Sitka Banner", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Cadastro de professores e funcionarios");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/CadastroImagem.png"))); // NOI18N

        javax.swing.GroupLayout tabCadastroProfFunLayout = new javax.swing.GroupLayout(tabCadastroProfFun);
        tabCadastroProfFun.setLayout(tabCadastroProfFunLayout);
        tabCadastroProfFunLayout.setHorizontalGroup(
            tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                        .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                                        .addComponent(dataDeAdimissao, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(telefone, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(salario, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                                            .addComponent(endereco, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(matricula))
                                        .addComponent(nome, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(escolha, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel3))))
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabCadastroProfFunLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                                .addComponent(escolas, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabCadastroProfFunLayout.createSequentialGroup()
                                .addComponent(btnSalvar)
                                .addGap(88, 88, 88)))
                        .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(qtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(setor, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        tabCadastroProfFunLayout.setVerticalGroup(
            tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(tabCadastroProfFunLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(escolha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(35, 35, 35)
                .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(telefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataDeAdimissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(escolas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabCadastroProfFunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(qtn)
                    .addComponent(btnSalvar))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        nome.getAccessibleContext().setAccessibleName("");

        jTabbedPane1.addTab("Cadastro de Professores/Funcionarios", tabCadastroProfFun);

        nomeEscola.setText("Nome Da Escola");

        btnSalvarEscola.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/save.png"))); // NOI18N
        btnSalvarEscola.setText("Salvar");
        btnSalvarEscola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarEscolaActionPerformed(evt);
            }
        });

        escolhaEscola.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escolha uma Escola" }));
        escolhaEscola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escolhaEscolaActionPerformed(evt);
            }
        });

        verProfessores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Matricula", "Endereço", "Telefone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(verProfessores);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/EscolaImagem.png"))); // NOI18N

        progressoTabela.setBackground(new java.awt.Color(204, 204, 204));
        progressoTabela.setForeground(new java.awt.Color(102, 102, 102));
        progressoTabela.setStringPainted(true);

        javax.swing.GroupLayout tabCadastroEscolasLayout = new javax.swing.GroupLayout(tabCadastroEscolas);
        tabCadastroEscolas.setLayout(tabCadastroEscolasLayout);
        tabCadastroEscolasLayout.setHorizontalGroup(
            tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastroEscolasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(tabCadastroEscolasLayout.createSequentialGroup()
                        .addGroup(tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(escolhaEscola, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabCadastroEscolasLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nomeEscola, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSalvarEscola)
                                .addGap(12, 12, 12)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(progressoTabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        tabCadastroEscolasLayout.setVerticalGroup(
            tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCadastroEscolasLayout.createSequentialGroup()
                .addGroup(tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabCadastroEscolasLayout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(tabCadastroEscolasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nomeEscola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSalvarEscola, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabCadastroEscolasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addGap(40, 40, 40)))
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(escolhaEscola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(progressoTabela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );

        jTabbedPane1.addTab("Cadastro de Escolas", tabCadastroEscolas);

        jLabel1.setText("Desenvolvido por: Cleisson B.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(19, 19, 19))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void escolhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escolhaActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //Verifica se foi selecionado o item professor
                if (escolha.getSelectedItem().equals("Professores")) {
                    //Habilita o escolas e desabilita o setor
                    escolas.setEnabled(true);
                    setor.setEnabled(false);
                } else {
                    //inverte caso seja selecionado outra opção
                    escolas.setEnabled(false);
                    setor.setEnabled(true);
                }
            }
        });
    }//GEN-LAST:event_escolhaActionPerformed


    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        try {
            //Exibe Painel de confirmação
            if (JOptionPane.showConfirmDialog(null, "Tem Certeza que deseja Salvar?", "Salvar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                //Convertendo as entradas do usuario(String) em numeros
                String dataEmUmFormato = dataDeAdimissao.getText();
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                Date data = null;
                try {
                    data = formato.parse(dataEmUmFormato);
                } catch (ParseException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                formato.applyPattern("ddMMyyyy");
                String dataFormatada = formato.format(data);
                dataAdimicao = Integer.parseInt(dataFormatada);
                matriculaFunc = Integer.parseInt(this.matricula.getText()) + cadastroDB.size();
                salarioFunc = Float.parseFloat(this.salario.getText());
                telefoneFunc = Integer.parseInt(this.telefone.getText());
                //Logica para quando o usuario seleciona o item professor    
                if (this.escolha.getSelectedItem().equals("Professores")) {
                    String escola = this.escolas.getSelectedItem().toString();
                    //Cria novo objeto com as entradas do usuario
                    novoCadastro = new CadastrosDB(dataAdimicao, this.endereco.getText(), matriculaFunc,
                            nome.getText(),
                            salarioFunc,
                            telefoneFunc,
                            escola);
                    exibeCadastro += novoCadastro.getNome() + " | " + novoCadastro.getMatricula() + "\n";
                    //Adicionando o novo objeto no Arrey List
                    cadastroDB.add(novoCadastro);
                } else {
                    //Logica para quando o usuario seleciona outro item   
                    novoCadastro = new CadastrosDB(dataAdimicao, this.endereco.getText(), matriculaFunc,
                            this.nome.getText(), salarioFunc, telefoneFunc, this.setor.getSelectedItem().toString());
                    exibeCadastro += novoCadastro.getNome() + " | " + novoCadastro.getMatricula() + "\n";
                    //Adicionando o novo objeto no Arrey List
                    cadastroDB.add(novoCadastro);
                }
                qtn.setText("Quantidade de cadastros: " + cadastroDB.size());
                //escolha.addItem("teste");
            }
            salvarDados();;
        } catch (Exception e) {
            //Menssagem de Erro caso usuario insira uma entrada invalida
            JOptionPane.showMessageDialog(null, ">>   ATENÇÂO!  <<\nVerifique se você não preencheu algum campo incorretamente!\n\n"
                    + "> Não é permitido inserir Letras no lugar de numeros vice-versa.\n"
                    + "> É necessario preencher todos os campos!", "Erro! Não foi possível salvar!!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSalvarActionPerformed
    private void salvarDados() {
        Gson gson = new Gson();
        CadastrosDB cadastro;
        String json = gson.toJson(cadastroDB);
        WriteFile(json, "registro.txt");
        java.lang.reflect.Type tipo = new TypeToken<ArrayList<CadastrosDB>>() {
        }.getType();
        ArrayList<CadastrosDB> listaDePessoas = new ArrayList<>();
        for (String s : ReadFile("registro.txt")) {
            listaDePessoas = gson.fromJson(s, tipo);
            listaDePessoas.forEach(p -> System.out.println("Nome: " + p.getNome() + " Matricula: " + p.getMatricula()));
        }
    }

    private void matriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matriculaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_matriculaActionPerformed

    private void setorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setorActionPerformed

    private void btnSalvarEscolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarEscolaActionPerformed
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {

                Escolas novaEscola = new Escolas(nomeEscola.getText());
                if (!escolasDB.isEmpty()) {
                    if (escolaExiste(nomeEscola.getText())) {

                    } else {
                        escolasDB.add(novaEscola);
                        escolhaEscola.addItem(novaEscola.getNome());
                        escolas.addItem(novaEscola.getNome());
                        Gson gson = new Gson();
                        Escolas cadastro;
                        String json = gson.toJson(escolasDB);
                        WriteFile(json, "registroEscolas.txt");
                    }

                } else {
                    escolasDB.add(novaEscola);
                    escolhaEscola.addItem(novaEscola.getNome());
                    escolas.addItem(novaEscola.getNome());
                    Gson gson = new Gson();
                    Escolas cadastro;
                    String json = gson.toJson(escolasDB);
                    WriteFile(json, "registroEscolas.txt");
                }

            }
        });
    }//GEN-LAST:event_btnSalvarEscolaActionPerformed
    private boolean escolaExiste(String escola) {
        boolean existe = false;
        for (int i = 0; i < escolasDB.size(); i++) {
            Escolas novo = (Escolas) escolasDB.get(i);
            if (nomeEscola.getText().equals(novo.getNome())) {
                JOptionPane.showMessageDialog(null, "Ja existe essa escola na base de dados!\nPor favor tente novamente.", "ERRO!", JOptionPane.ERROR_MESSAGE);
                existe = true;
                break;
            }
        }
        return existe;
    }

    private void escolhaEscolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escolhaEscolaActionPerformed
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                int matriculaAnterior = 0;
                int linhas = 0;
                for (int i = 0; i < cadastroDB.size(); i++) {
                    //atribui ao objeto um cadastro alocano na arrey
                    novoCadastro = (CadastrosDB) cadastroDB.get(i);
                    //Verifica se o item selecionado é igual ao cadastrado
                    if (novoCadastro.getEscolaOuSetor().equals(escolhaEscola.getSelectedItem().toString())) {
                        final SwingWorker w = new SwingWorker() {
                            @Override
                            protected Object doInBackground() throws Exception {
                                for (int i = 1; i <= 100; i++) {
                                    try {
                                        if (i < 100) {
                                            setCursor(new Cursor(Cursor.WAIT_CURSOR));
                                        }
                                        if (i == 100) {
                                            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                        }
                                        if (i == 30) {
                                            progressoTabela.setToolTipText("Quase terminando");
                                        }

                                        progressoTabela.setValue(i);
                                        progressoTabela.setString(i + "%");
                                        Thread.sleep(verProfessores.getRowCount());
                                    } catch (InterruptedException ex) {
                                        ex.printStackTrace();
                                    }
                                }
                                return 0;
                            }
                        };
                        if (linhas != verProfessores.getRowCount() || verProfessores.getRowCount() == 0) {
                            w.execute();
                        }
                        //Enquanto o cadastro for diferente do loop anterior..
                        if (i > 0 && matriculaAnterior != novoCadastro.getMatricula()) {
                            try {
                                //Enquanto houver linhas suficientes na tabela, vai preenchendo..
                                verProfessores.setValueAt(novoCadastro.getNome(), linhas, 0);
                                verProfessores.setValueAt(novoCadastro.getMatricula(), linhas, 1);
                                verProfessores.setValueAt(novoCadastro.getEndereco(), linhas, 2);
                                verProfessores.setValueAt(novoCadastro.getTelefone(), linhas, 3);
                            } catch (ArrayIndexOutOfBoundsException e) {
                                //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                                JTable t = new JTable(verProfessores.getModel());
                                DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                                modelo.addRow(new Object[]{null, null});
                                //Preenche a linha vazia que foi criada
                                verProfessores.setValueAt(novoCadastro.getNome(), linhas, 0);
                                verProfessores.setValueAt(novoCadastro.getMatricula(), linhas, 1);
                                verProfessores.setValueAt(novoCadastro.getEndereco(), linhas, 2);
                                verProfessores.setValueAt(novoCadastro.getTelefone(), linhas, 3);
                            }
                            //Verifica se é a primeira passagem do loop
                        } else if (i == 0) {
                            try {
                                //Enquanto houver linhas suficientes na tabela..
                                verProfessores.setValueAt(novoCadastro.getNome(), linhas, 0);
                                verProfessores.setValueAt(novoCadastro.getMatricula(), linhas, 1);
                                verProfessores.setValueAt(novoCadastro.getEndereco(), linhas, 2);
                                verProfessores.setValueAt(novoCadastro.getTelefone(), linhas, 3);
                            } catch (ArrayIndexOutOfBoundsException e) {
                                //Se a tabela estiver cheias, acrescenta mais uma linha vazia.
                                JTable t = new JTable(verProfessores.getModel());
                                DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                                modelo.addRow(new Object[]{null, null});
                                //Preenche a linha vazia que foi criada
                                verProfessores.setValueAt(novoCadastro.getNome(), linhas, 0);
                                verProfessores.setValueAt(novoCadastro.getMatricula(), linhas, 1);
                                verProfessores.setValueAt(novoCadastro.getEndereco(), linhas, 2);
                                verProfessores.setValueAt(novoCadastro.getTelefone(), linhas, 3);
                            }
                        } else if (matriculaAnterior == novoCadastro.getMatricula()) {
                            //decrementa em linhas se matricula for igual o da varredura anterior.
                            linhas--;
                        }

                        linhas++;
                        //Remove as linhas desnecessarias da tabela
                        while (verProfessores.getRowCount() > linhas) {
                            JTable t = new JTable(verProfessores.getModel());
                            DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                            modelo.removeRow(verProfessores.getRowCount() - linhas);
                        }
                        matriculaAnterior = novoCadastro.getMatricula();
                        //Remove todas as linhas da tabela  
                    } else if (escolhaEscola.getSelectedItem()
                            .equals("Escolha uma Escola")) {
                        progressoTabela.setValue(0);
                        progressoTabela.setString("0%");
                        JTable t = new JTable(verProfessores.getModel());
                        DefaultTableModel modelo = (DefaultTableModel) t.getModel();
                        modelo.removeRow(verProfessores.getRowCount() - 1);
                        //modelo.removeRow(6);
                    }
                }
            }
        }
        );

    }//GEN-LAST:event_escolhaEscolaActionPerformed

    private void nomeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nomeFocusGained
        if (nome.getText().equals("Nome completo")) {
            nome.setText("");
        }
    }//GEN-LAST:event_nomeFocusGained

    private void nomeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nomeFocusLost
        if (nome.getText().equals("")) {
            nome.setText("Nome completo");
        }
    }//GEN-LAST:event_nomeFocusLost

    private void enderecoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enderecoFocusGained
        if (endereco.getText().equals("Endereço")) {
            endereco.setText("");
        }
    }//GEN-LAST:event_enderecoFocusGained

    private void enderecoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_enderecoFocusLost
        if (endereco.getText().equals("")) {
            endereco.setText("Endereço");
        }
    }//GEN-LAST:event_enderecoFocusLost

    private void matriculaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_matriculaFocusGained
        if (matricula.getText().equals("Matricula")) {
            matricula.setText("");
        }
    }//GEN-LAST:event_matriculaFocusGained

    private void matriculaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_matriculaFocusLost
        if (matricula.getText().equals("")) {
            matricula.setText("Matricula");
        }
    }//GEN-LAST:event_matriculaFocusLost

    private void dataDeAdimissaoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataDeAdimissaoFocusGained
        if (dataDeAdimissao.getText().equals("Data de Admissão")) {
            dataDeAdimissao.setText("");
        }
    }//GEN-LAST:event_dataDeAdimissaoFocusGained

    private void dataDeAdimissaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dataDeAdimissaoFocusLost
        if (dataDeAdimissao.getText().equals("")) {
            dataDeAdimissao.setText("Data de Admissão");
        }

        String dataEmUmFormato = dataDeAdimissao.getText();
        SimpleDateFormat formato = new SimpleDateFormat("ddMMyyyy");
        Date data = null;
        try {
            data = formato.parse(dataEmUmFormato);

        } catch (ParseException ex) {
            Logger.getLogger(Main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        formato.applyPattern("dd/MM/yyyy");
        String dataFormatada = formato.format(data);
        dataDeAdimissao.setText(dataFormatada);
    }//GEN-LAST:event_dataDeAdimissaoFocusLost

    private void telefoneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_telefoneFocusGained
        if (telefone.getText().equals("(xx) xxxx-xxxx")) {
            telefone.setText("");
        }
    }//GEN-LAST:event_telefoneFocusGained

    private void telefoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_telefoneFocusLost
        if (telefone.getText().equals("")) {
            telefone.setText("(xx) xxxx-xxxx");
        }
    }//GEN-LAST:event_telefoneFocusLost

    private void salarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_salarioFocusGained
        if (salario.getText().equals("Salario")) {
            salario.setText("");
        }
    }//GEN-LAST:event_salarioFocusGained

    private void salarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_salarioFocusLost
        if (salario.getText().equals("")) {
            salario.setText("Salario");
        }
    }//GEN-LAST:event_salarioFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
                Gson gson = new Gson();
                java.lang.reflect.Type tipo = new TypeToken<ArrayList<CadastrosDB>>() {
                }.getType();
                ArrayList<CadastrosDB> listaDePessoas = new ArrayList<>();
                for (String s : ReadFile("registro.txt")) {
                    cadastroDB = gson.fromJson(s, tipo);
                    //cadastroDB.forEach(p -> add("Nome: " + p.getNome() + " Matricula: " + p.getMatricula()));
                }
                java.lang.reflect.Type tipoEscolas = new TypeToken<ArrayList<Escolas>>() {
                }.getType();
                ArrayList<Escolas> listaDeEscolas = new ArrayList<>();
                for (String e : ReadFile("registroEscolas.txt")) {
                    escolasDB = gson.fromJson(e, tipoEscolas);
                    if (!escolasDB.isEmpty()) {
                        String aux = "";
                        for (int i = 0; i < escolasDB.size(); i++) {
                            Escolas novo = (Escolas) escolasDB.get(i);
                            if (aux.equals(novo.getNome())) {
                            } else {
                                escolhaEscola.addItem(novo.getNome());
                                escolas.addItem(novo.getNome());
                            }
                            aux = novo.getNome();
                        }
                    }
                }

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnSalvarEscola;
    private javax.swing.JTextField dataDeAdimissao;
    private javax.swing.JTextField endereco;
    private static javax.swing.JComboBox<String> escolas;
    private javax.swing.JComboBox<String> escolha;
    private static javax.swing.JComboBox<String> escolhaEscola;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField matricula;
    private javax.swing.JTextField nome;
    private javax.swing.JTextField nomeEscola;
    private javax.swing.JProgressBar progressoTabela;
    private javax.swing.JLabel qtn;
    private javax.swing.JTextField salario;
    private javax.swing.JComboBox<String> setor;
    private javax.swing.JPanel tabCadastroEscolas;
    private javax.swing.JPanel tabCadastroProfFun;
    private javax.swing.JTextField telefone;
    private javax.swing.JTable verProfessores;
    // End of variables declaration//GEN-END:variables
    CadastrosDB novoCadastro, anterior;
    private String exibeCadastro = "";
    public static ArrayList cadastroDB = new ArrayList();
    public static ArrayList escolasDB = new ArrayList();
    private int dataAdimicao;
    private int matriculaFunc;
    private float salarioFunc;
    private int telefoneFunc;
}
